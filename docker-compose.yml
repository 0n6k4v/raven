services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      cache_from:
        - frontend:latest
    env_file:
      - path: ./frontend/.env
        required: true
    ports:
      - "80:80"
    environment:
      - VITE_SPHERE_API_KEY=${VITE_SPHERE_API_KEY}
      - VITE_LONGDO_MAP_API_KEY=${VITE_LONGDO_MAP_API_KEY}
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      - backend-api
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
      cache_from:
        - backend-api:latest
    env_file:
      - path: ./backend-api/.env
        required: true
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}}
      - AI_SERVICE_URL=${AI_SERVICE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
      - DEBUG=false
    depends_on:
      db-service:
        condition: service_healthy
      ai-service:
        condition: service_started
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 1G

  ai-service:
    build:
      context: ./ai-service-api
      dockerfile: Dockerfile
      cache_from:
        - ai-service:latest
    ports:
      - "8080:8080"
    environment:
      - HOST=0.0.0.0
      - PORT=8080
      - MODEL_PATH=/app/ai_models
      - YOLO_CONFIG_DIR=/tmp/Ultralytics
      - AI_MODE=segment_only
      - LOG_LEVEL=INFO
      - DEBUG=false
      - ENVIRONMENT=production
    volumes:
      - ./ai-service-api/app/ai_models:/app/ai_models
    networks:
      - app-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.00'
          memory: 4G

  db-service:
    build:
      context: ./db-service
      dockerfile: Dockerfile
      cache_from:
        - db-service:latest
    env_file:
      - path: ./db-service/.env
        required: true
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: